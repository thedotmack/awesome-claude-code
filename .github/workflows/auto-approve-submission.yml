name: Auto-Approve Validated Submissions

on:
  issues:
    types: [labeled]

jobs:
  auto-approve:
    # Only run when validation-passed label is added
    if: github.event.label.name == 'validation-passed'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML requests PyGithub python-dotenv
      
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Comment about auto-approval
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üéâ Auto-Approval in Progress\n\n` +
                    `Your submission passed validation and is being automatically approved!\n\n` +
                    `**Our Philosophy:** \`Validation Passed = Automatically Listed\`\n\n` +
                    `A pull request will be created shortly to add your resource to the list.\n\n` +
                    `---\n` +
                    `<sub>This is an automated approval. Everyone gets to play! üöÄ</sub>`
            });
      
      - name: Parse issue and create PR
        id: create_pr
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # First parse the issue to get resource data
          python scripts/parse_issue_form.py > resource_data.json
          
          # Create the PR with the resource
          python scripts/create_resource_pr.py \
            --issue-number $ISSUE_NUMBER \
            --resource-data resource_data.json \
            > pr_result.json
      
      - name: Comment on issue with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let pr_url = null;
            
            try {
              const prResult = JSON.parse(fs.readFileSync('pr_result.json', 'utf8'));
              pr_url = prResult.pr_url;
            } catch (error) {
              console.error('Error reading pr_result.json:', error);
            }
            
            const issue_number = context.issue.number;
            
            let comment_body = '## ‚úÖ Resource Auto-Approved!\n\n';
            
            if (pr_url && pr_url !== 'null') {
              comment_body += `üéâ Your resource has been automatically approved and a pull request has been created: ${pr_url}\n\n`;
              comment_body += 'The PR will be merged shortly, and your resource will be live on the list.\n\n';
              comment_body += '**Thank you for contributing to Awesome Claude Code!**\n\n';
              comment_body += '---\n';
              comment_body += '<sub>üöÄ Auto-approved because validation passed. No gatekeeping, no waiting. Everyone gets to play!</sub>';
              
              // Add approved label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                labels: ['approved', 'pr-created', 'auto-approved']
              });
              
              // Close the issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                state: 'closed',
                state_reason: 'completed'
              });
            } else {
              comment_body += '‚ùå There was an error creating the pull request.\n\n';
              comment_body += 'A maintainer will investigate and help get your resource added. Please check the workflow logs for details.';
              
              // Add error label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                labels: ['error-creating-pr']
              });
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: comment_body
            });
      
      - name: Cleanup temporary files
        if: always()
        run: |
          rm -f pr_result.json resource_data.json
